import telebot
from telebot import apihelper
from menu import (
    main_menu,
    vacancy_search_options,
    vacancy_actions,
    back_to_menu
)
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

bot = TeleBot(BOT_TOKEN)

# –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
try:
    bot.delete_webhook()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

# –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
bot.polling(none_stop=True)

# /start –∏ /help
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message: types.Message):
    user = message.from_user
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –¥–ª—è –ª—é–¥–µ–π —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )
    logger.info(f"User {user.id} started the bot")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(func=lambda msg: msg.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
def back_handler(message: types.Message):
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )

# –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
@bot.message_handler(func=lambda msg: msg.text == 'üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π')
def search_vacancies(message: types.Message):
    bot.send_message(
        message.chat.id,
        "üîé –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—É–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞'):",
        reply_markup=back_to_menu()
    )
    bot.register_next_step_handler(message, process_search_query)

def process_search_query(message: types.Message):
    query = message.text
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
    bot.send_message(
        message.chat.id,
        f"üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'...",
        reply_markup=vacancy_actions(vacancy_id=1)  # –ü—Ä–∏–º–µ—Ä ID –≤–∞–∫–∞–Ω—Å–∏–∏
    )
    logger.info(f"Search: {query}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@bot.message_handler(func=lambda msg: msg.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞')
def show_filters(message: types.Message):
    bot.send_message(
        message.chat.id,
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:",
        reply_markup=vacancy_search_options()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ (—Ñ–∏–ª—å—Ç—Ä—ã, –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏)
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: types.CallbackQuery):
    if call.data.startswith('filter_'):
        filter_type = call.data.split('_')[1]
        bot.answer_callback_query(
            call.id,
            f"–ü—Ä–∏–º–µ–Ω—ë–Ω —Ñ–∏–ª—å—Ç—Ä: {filter_type}"
        )
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    elif call.data.startswith('save_'):
        vacancy_id = call.data.split('_')[1]
        bot.answer_callback_query(
            call.id,
            "‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        )
    elif call.data == 'next_vacancy':
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        bot.edit_message_text(
            "–°–ª–µ–¥—É—é—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:\n\n<b>–£–¥–∞–ª—ë–Ω–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä</b>\n–ó–∞—Ä–ø–ª–∞—Ç–∞: 30 000 —Ä—É–±.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=vacancy_actions(vacancy_id=2),
            parse_mode='HTML'
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("Bot started")
    bot.infinity_polling()
