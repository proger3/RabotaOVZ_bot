import os
import logging
from flask import Flask, request
from telebot import TeleBot, types
from menu import main_menu

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN!")
    exit(1)

bot = TeleBot(BOT_TOKEN)
app = Flask(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    try:
        user = message.from_user
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
        bot.send_message(
            message.chat.id,
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    try:
        if message.text == 'üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π':
            msg = bot.send_message(
                message.chat.id,
                "üîé –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, process_search)
        elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            bot.send_message(
                message.chat.id,
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def process_search(message):
    try:
        query = message.text
        logger.info(f"–ü–æ–∏—Å–∫: {query}")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        bot.send_message(
            message.chat.id,
            f"üîç –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'...",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_data = request.get_data().decode('utf-8')
        update = types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return '', 200
    return 'Bad request', 400

if __name__ == '__main__':
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –≤–µ–±—Ö—É–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        WEBHOOK_URL = os.getenv('WEBHOOK_URL')
        if not WEBHOOK_URL:
            logger.error("–ù–µ –∑–∞–¥–∞–Ω WEBHOOK_URL!")
            exit(1)

        logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫...")
        bot.remove_webhook()
        bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞")
        app.run(host='0.0.0.0', port=10000)
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
